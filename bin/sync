#!/usr/bin/env node

var through = require('through2');

var Env = require('../env.js');
var Firebaseref = require('../firebaseref.js');

var Events = require('../sources/events/index.js');
var Employees = require('../sources/employees/index.js');
var Courses = require('../sources/courses/index.js');

var sourcePrototypes = [Courses];


Env();

Firebaseref()
    .pipe(AddEduSyncNodeToFirebase())
    .pipe(ApplySyncProtocolToSources(sourcePrototypes))
    .pipe(GetSourcesData())
    .pipe(AddSourceToWebHook())
    .pipe(RemoveFromWebhookBasedOnSource())
    .pipe(ResolveRelationships())
    .pipe(Exit());


function AddEduSyncNodeToFirebase () {
    return through.obj(addEduSync);

    function addEduSync (fb, enc, next) {
        console.log('Add eduSync to Firebase.');

        var stream = this;

        fb.child('eduSync')
          .set({}, onComplete);

        function onComplete (error) {
            if (error) {
                throw new Error(error);
            }
            stream.push(fb);
            stream.push(null);
        }
    }
}

function ApplySyncProtocolToSources (sourcePrototypes) {
    var SyncProtocol = require('../syncProtocol.js');

    return through.obj(fbref);

    function fbref (fb, enc, next) {
        console.log('Applying sync protocol to sources.');

        var sources = sourcePrototypes.map(configure);
        this.push(sources);
        this.push(null);

        function configure (source) {
            SyncProtocol(source, fb);
            return source();
        }
    }
}

function GetSourcesData () {
    return through.obj(getSourceData);

    function getSourceData (sources, enc, next) {
        var m =
            'Get all data from sources & put into firebase.';
        console.log(m);

        var stream = this;
        var getters = sources
            .map(function (source) {
                return source.listSource()
                    .pipe(source.sourceStreamToFirebaseSource());
            });

        var getterCount = getters.length;
        getters.forEach(function (getter) {
            getter.on('data', function () {});
            getter.on('end', function checkDone () {
                getterCount -= 1;
                if (getterCount === 0) {
                    stream.push(sources);
                    stream.push(null);
                }
            });
        });
    }
}

function AddSourceToWebHook () {
    return through.obj(addSource);

    function addSource (sources, enc, next) {
        console.log('Add source data to webhook data.');

        var stream = this;
        var adders = sources
            .map(function (source) {
                return source.listFirebaseSource()
                    .pipe(source.addSourceToWebhook());
            });

        var addersCount = adders.length;
        adders.forEach(function (adder) {
            adder.on('data', function () {});
            adder.on('end', function checkDone () {
                addersCount -= 1;
                if (addersCount === 0) {
                    stream.push(sources);
                    stream.push(null);
                }
            });
        });
    }
}

function RemoveFromWebhookBasedOnSource () {
    /**
     * List the webhook and source values
     * if the webhook value is not in the
     * source values, invoke the model's
     * `webhookValueNotInSource`
     */
    return through.obj(remove);

    function remove (sources, enc, next) {
        var stream = this;

        var removers = sources
            .map(function (source) {
                return source.listFirebaseWebhook()
                    .pipe(source.addInSourceBool())
                    .pipe(source.updateWebhookValueNotInSource());
            });

        var removersCount = removers.length;
        removers.forEach(function (remover) {
            remover.on('data', function () {});
            remover.on('end', function () {
                removersCount -= 1;
                if (removersCount === 0) {
                    stream.push(sources);
                    stream.push(null);
                }
            });
        });
    }
}

function ResolveRelationships () {
    return through.obj(relationships);

    function relationships (sources, enc, next) {
        console.log('Resolve Relationships.');

        var stream = this;

        var resolvers = sources
            .map(function (source) {
                return source.listFirebaseWebhook()
                    .pipe(source.rrAddRelationshipsToResolve())
                    .pipe(source.rrGetRelatedData())
                    .pipe(source.rrPopulateRelated())
                    .pipe(source.rrSaveReverse())
                    .pipe(source.rrSaveCurrent());
            });

        var resolversCount = resolvers.length;
        resolvers.forEach(function (resolver) {
            resolver.on('data', function () {});
            resolver.on('end', function () {
                resolversCount -= 1;
                if (resolversCount === 0) {
                    stream.push(sources);
                    stream.push(null);
                }
            });
        });
    }
}

function Exit () {
    return through.obj(exit);

    function exit (row, enc, next) {
        console.log('Done!');
        this.push(null);
        process.exit();
    }
}

function DeleteEmployees () {
    return through.obj (del);

    function del (fb, enc, next) {
        var stream = this;
        fb.child('data/employees')
          .set({},
               function () {
                   stream.push({});
                   stream.push(null);
               });
    }
}

function FirebaseTopLevel () {
    return through.obj(fbref);
    
    function fbref (fb, enc, next) {
        var self = this;
        fb.once('value', data, error);

        function data (snapshot) {
            var v = snapshot.val();
            console.log(Object.keys(v));

            done();
        }

        function error (err) {
            console.log(err);

            done();
        }

        function done () {
            self.push({});
            self.push(null);
        }
    }
}
